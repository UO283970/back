type Query{
    #User queries
    login(email: String!, password: String!): UserLogin!
    logout: String!
    refreshToken(oldRefreshToken: String!): String!
    getUserSearchInfo(userQuery: String!): [User!]!
    getAuthenticatedUserInfo: User!
    getAllUserInfo(userId: String!): User!
    getFollowersOfUser(userId: String!): [User!]!
    getFollowingListUser(userId: String!): [User!]!
    getUsersReviews(userId: String!): [Activity!]!

    #Lists queries
    getBasicListInfo(id: String!): BookList
    getAllListInfo(id: String!): BookList
    getUserDefaultList(userId: String!, listId: String!): BookList
    getUserDefaultLists(userId: String!): BookList
    searchLists(userQuery: String!): [BookList!]!

    #User activity queries
    getAllFollowedActivity: [Activity!]! #TODO
    getUserReviews(userId: String!): [Activity!]! #TODO
}

type Mutation{
    #User mutations
    createUser(email: String!, password: String!, userAlias: String!, userName: String!, profilePictureURL: String!): UserLogin!
    updateUser(userAlias: String!, userName: String!, profilePictureURL: String!, description: String!): UserLogin!
    deleteUser: Boolean!

    #Follow mutations
    followUser(friendId: String!): UserFollowState!
    cancelFollow(friendId: String!): Boolean!
    acceptRequest(friendId: String!): Boolean!
    cancelRequest(friendId: String!): Boolean!
    deleteFromFollower(friendId: String!): Boolean!

    #List mutations
    createList(listName: String!, description: String!, bookListPrivacy: BookListPrivacy!): BookList!
    updateList(listId: String!,listName: String!, description: String!, bookListPrivacy: BookListPrivacy!): Boolean!
    deleteList(listId: String!): Boolean!
    addBookToDefaultList(listId: String!, bookId: String!): ReadingState!
    removeBookToDefaultList(listId: String!, bookId: String!): Boolean!
    addBookToList(listId: String!, bookId: String!): Boolean!
    removeBookFromList(listId: String!, bookId: String!): Boolean!

    #User activity mutations
    addActivity(text : String!, score: Int!, bookId: String) : String! #TODO
    deleteActivity(activityId: String!) : Boolean! #TODO
    updateActivity(text : String!, score: Int!): Boolean! #TODO
}

type UserLogin{
    tokenId: String!
    refreshToken: String!
}

type User{
    userId: String!
    userName: String!
    userAlias: String!
    userPhotoURL: String!
    description: String!
    userPrivacy: UserPrivacy!
    userFollowState: UserFollowState!
    followedUsersCount: Int!
    followingUsersCount: Int!
    userActivitiesCount: Int!
    userDefaultLists: [BookList]!
    userLists: [BookList]!
}

enum UserPrivacy {
    PRIVATE,
    PUBLIC
}

enum UserFollowState {
    FOLLOWING,
    NOT_FOLLOW,
    REQUESTED,
    OWN
}

enum BookListPrivacy{
    PRIVATE,
    PUBLIC,
    ONLY_FOLLOWERS
}

type BookList{
    id: String!
    listName: String!
    numberOfBooks: [String!]!
    bookListPrivacy: BookListPrivacy!
    description: String!
}

type Activity{
    text: String!
    score: Int!
    user: User!
    book: Book!
}

enum userActivityType{
    REVIEW,
    RATING
}

type Book{
    tittle: String!
    author: String!
    pages: Int!
    meanScore: Float!
    userScore: Int!
    subjects: [String!]!
    details: String
    readingState: ReadingState!
    coverImageURL: String!
}

enum ReadingState {
    NOT_IN_LIST,
    READING,
    DROPPED,
    WAITING,
    READ,
    PLAN_TO_READ
}